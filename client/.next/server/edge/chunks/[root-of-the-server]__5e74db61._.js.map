{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/Developer/Projects/tempo/client/app/auth.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport Google from \"next-auth/providers/google\";\n//import NodemailerProvider from \"next-auth/providers/nodemailer\";\n\nimport { PrismaClient } from \"@prisma/client\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\n\nconst prisma = new PrismaClient()  \n\nexport const { auth, handlers, signIn, signOut } = NextAuth({\n   providers: [\n      Google({\n         clientId: process.env.GOOGLE_CLIENT_ID!,\n         clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n      }),\n      //NodemailerProvider({\n    //server: process.env.EMAIL_SERVER,\n    //from: process.env.EMAIL_FROM\n  //}),\n   ],\n   adapter: PrismaAdapter(prisma),\n   session: {\n      strategy: \"database\",\n   },\n   callbacks: {\n      session: async ({ session, user }) => {\n         if (session?.user) {\n            session.user.id = user.id;\n         }\n         return session;\n      },\n   },\n   pages: {\n      signIn: \"/login\",\n   },\n });"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AAAA;AACA,kEAAkE;AAElE;AACA;;;;;AAEA,MAAM,SAAS,IAAI,iNAAY;AAExB,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,IAAA,oNAAQ,EAAC;IACzD,WAAW;QACR,IAAA,oNAAM,EAAC;YACJ,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QACjD;KAKF;IACD,SAAS,IAAA,yNAAa,EAAC;IACvB,SAAS;QACN,UAAU;IACb;IACA,WAAW;QACR,SAAS,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE;YAC9B,IAAI,SAAS,MAAM;gBAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,KAAK,EAAE;YAC5B;YACA,OAAO;QACV;IACH;IACA,OAAO;QACJ,QAAQ;IACX;AACF"}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/Developer/Projects/tempo/client/middleware.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\nimport { auth } from \"./app/auth\";\n\nconst protectedRoutes = [\"/dashboard\"]\n\nexport default async function middleware(request: NextRequest){\n    const session = await auth()\n\n    const {pathname} = request.nextUrl;\n\n    const isProtected = protectedRoutes.some((route) =>\n        pathname.startsWith(route)\n    );\n\n    if (isProtected && !session ) {\n        return NextResponse.redirect(new URL(\"/login\", request.url));\n    }\n\n    return NextResponse.next();\n}"],"names":[],"mappings":";;;;AAAA;AAAA;AAEA;;;AAEA,MAAM,kBAAkB;IAAC;CAAa;AAEvB,eAAe,WAAW,OAAoB;IACzD,MAAM,UAAU,MAAM,IAAA,uKAAI;IAE1B,MAAM,EAAC,QAAQ,EAAC,GAAG,QAAQ,OAAO;IAElC,MAAM,cAAc,gBAAgB,IAAI,CAAC,CAAC,QACtC,SAAS,UAAU,CAAC;IAGxB,IAAI,eAAe,CAAC,SAAU;QAC1B,OAAO,4OAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;IAC9D;IAEA,OAAO,4OAAY,CAAC,IAAI;AAC5B"}}]
}